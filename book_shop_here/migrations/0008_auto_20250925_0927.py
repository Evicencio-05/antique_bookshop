# Generated by Django 5.2.6 on 2025-09-25 16:27

from django.db import migrations

def create_groups_and_profiles(apps, schema_editor):
    """
    Creates the required Groups (roles) and their associated GroupProfile records
    and assigns permissions based on the business rules.
    """
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    GroupProfile = apps.get_model('book_shop_here', 'GroupProfile')

    # Define the groups, descriptions, and the permissions they should have.
    # Note: Permission codenames follow the pattern: <action>_<model_name>
    GROUPS_TO_CREATE = [
        {
            'name': 'Owner', 
            'description': 'Owner - Has full access to all information and can modify all data and employee records.', 
            'permissions': [
                'add_employee', 'change_employee', 'delete_employee', 'view_employee', 
                'add_author', 'change_author', 'delete_author', 'view_author',
                'add_book', 'change_book', 'delete_book', 'view_book',
                'add_customer', 'change_customer', 'delete_customer', 'view_customer',
                'add_order', 'change_order', 'view_order', 
            ]
        },
        {
            'name': 'Assistant Manager', 
            'description': 'Assistant Manager - Can access and modify all employee information and is allowed to modify Author, Book, and Customer data.', 
            'permissions': [
                'add_employee', 'change_employee', 'delete_employee', 'view_employee',
                'add_author', 'change_author', 'delete_author', 'view_author',
                'add_book', 'change_book', 'delete_book', 'view_book',
                'add_customer', 'change_customer', 'delete_customer', 'view_customer',
                'add_order', 'change_order', 'view_order', 
            ]
        },
        {
            'name': 'Full Time Sales Clerk', 
            'description': 'Sales Clerk - Can view Author, Book, Customer, and Order information, and can create/track/modify orders.', 
            'permissions': [
                'view_author', 'view_book', 'view_customer', 
                'add_order', 'change_order', 'view_order',
            ]
        },
        {
            'name': 'Part Time Sales Clerk', 
            'description': 'Sales Clerk - Can view Author, Book, Customer, and Order information, and can create/track/modify orders.', 
            'permissions': [
                'view_author', 'view_book', 'view_customer', 
                'add_order', 'change_order', 'view_order', 
            ]
        },
    ]
    
    for group_data in GROUPS_TO_CREATE:
        group, created = Group.objects.get_or_create(name=group_data['name'])
        
        # Create the GroupProfile (description)
        GroupProfile.objects.update_or_create(
            group=group,
            defaults={'description': group_data['description']}
        )

        # Assign permissions to the group
        perms_to_assign = Permission.objects.filter(codename__in=group_data['permissions'])
        group.permissions.add(*perms_to_assign)

def remove_groups_and_profiles(apps, schema_editor):
    """Reverses the creation of the groups."""
    Group = apps.get_model('auth', 'Group')
    GroupProfile = apps.get_model('book_shop_here', 'GroupProfile')
    
    group_names = ['Owner', 'Assistant Manager', 'Full Time Sales Clerk', 'Part Time Sales Clerk']
    
    # The GroupProfile records will be CASCADE deleted when the Group is deleted.
    Group.objects.filter(name__in=group_names).delete()

class Migration(migrations.Migration):

    dependencies = [
        ("book_shop_here", "0007_groupprofile_alter_employee_position_id_delete_role"),
    ]

    operations = [
        migrations.RunPython(create_groups_and_profiles, remove_groups_and_profiles),

    ]
